Package: decorators
Type: Package
Title: Extend the Behaviour of a Function without Explicitly Modifying it
URL: https://tidylab.github.io/decorators/, https://github.com/tidylab/decorators
BugReports: https://github.com/tidylab/decorators/issues
Version: 0.1.0
Date: 2021-02-15
Authors@R: c(
    person("Harel", "Lustiger", email = "tidylab@gmail.com", role = c("aut", "cre"),
    comment = c(ORCID = "0000-0003-2953-9598")),
    person("Tidylab", role = c("cph", "fnd"))
    )
Maintainer: Harel Lustiger <tidylab@gmail.com>   
Description: A decorator is a function that receives a function, extends its 
    behaviour, and returned the altered function. Any caller that uses the 
    decorated function uses the same interface as it were the original, 
    undecorated function. Decorators serve two primary uses: (1) Enhancing the 
    response of a function as it sends data to a second component; (2) 
    Supporting multiple optional behaviours. An example of the first use is a 
    timer decorator that runs a function, outputs its execution time on the 
    console, and returns the original function's result. An example of the 
    second use is input type validation decorator that during running time 
    tests whether the caller has passed input arguments of a particular class.
    Decorators can reduce execution time, say by `memoisation`, or reduce bugs 
    by adding defensive programming routines.
License: MIT + file LICENSE
Encoding: UTF-8
LazyData: true
RoxygenNote: 7.1.1
Roxygen: list(markdown = TRUE, r6 = TRUE)
Language: en-GB
Depends: 
    R (>= 3.5)
Suggests: 
    testthat,
Imports: 
    purrr,
Config/testthat/edition: 3
